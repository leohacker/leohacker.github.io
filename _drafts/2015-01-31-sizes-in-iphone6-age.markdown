---
layout: post
title: "Sizes in iPhone6 Age"
date: 2015-01-31 02:06
comments: true
categories: [iOS]
toc: true
published: true
---

随着iPhone6 plus的发布，iOS程序员也进入一个类似Android程序员的困境：多样的屏幕分辨率，不同长宽比例的屏幕尺寸，不同设备的ppi清晰度，如何编写一套代码来适应所有用户手中的机型。

## 困境
其实iOS的开发人员还是比较幸福的，在智能手机和平板崛起的这几年，Apple作为一个封闭的厂商只是发布了几款机型。而Andriod市场上是群雄并起，各种尺寸的机型都有。在iOS的开发中，需要明确区分是iPhone和iPad的不同尺寸，以及带来不同的设计和用户体验。不过随着iPhone plus的发布，新手程序员不可避免的遭遇全新的问题，于是对各种尺寸数据云里雾里一知半解就是入门的一个常见问题。

## Screen size, resolution, pixel and point
在XCode6中建立一个新的工程项目，大家很容易就会发现有一个专门用来管理图像资源的Images.xcassets特殊的文件夹。我们可以在这个文件夹中创建图像资源，然后在程序中引用。创建图像资源，设定好名称后，我们会发现XCode会留出三个空让我们填，而每个空得下方提示分别是1x, 2x, 3x。对于首次开发iOS应用的程序员来说，多半就一脸茫然了。其实这对于从早期就接触iOS开发的程序员来说，是很容易理解的概念，所以XCode也是在这里用2倍，3倍这种简单的方式来做提示。要理解这个问题最好从历史说起。

<!-- more -->

最初的iPhone的屏幕是320x480像素大小，后来发布了Retina屏幕的iPhone4，将整个屏幕的x和y轴的显示效果的细腻程度提高了一倍，分辨率也达到了640x960像素。如果我们的程序还是以像素为单位来定位，程序只是会占据屏幕左上角1/4的空间，在同样的屏幕大小下，显然就太小了。Retina屏幕的推出，目标是改进显示效果的细腻程度，也就是原来一个像素点现在可以用四个像素点来表示。如果这个像素点只有一个颜色，那么是否为Retina屏幕没有区别。不过在很多字体和曲线的边缘，原来的一个点在光栅化到更细腻的设备上时，会出现插值过渡的效果，使得显示边缘更加平滑。那么iOS在编程模型上，依旧保持了320x480这个大小，不过是以point为计算单位，程序的定位不用修改就可以运行在Retina屏幕上。所以显示效果其实可以假设是一样的。如果底层系统没有适配更细腻的光栅化，其实可以认为没有改进，也就是对程序员的设计没有影响。

在迁移应用到Retina版本的时候，采用2D系统绘制或者Render系统渲染出来的东西都没有问题，例如绘制的图像和字体的渲染。但是图片是PNG格式的像素点阵，在载入到程序中，实际显示在屏幕上的可视大小变小了。于是乎，在Retina屏幕出现的时候，2x的概念出现了。为了在Retina屏幕上显示对人眼合适的图片大小，我们要将原来的图片制作一个xy轴各放大一倍的版本，也就是2x版本的图片。Apple给出了一个有趣的解决方案：在原来存放图片的资源目录下，加入一个example.png的新版本，example@2x.png，代码`[UIImage imageNamed:@"example"]`会根据是运行在Retina屏幕还是普通屏幕正确的载入图片资源。

iPhone4s，iPhone5, iPhone5s沿用了Retina屏幕，也没有改变屏幕的ppi，所以在程序设计上我们也继续沿用2x的设计。值得注意的是，iPhone5以后的屏幕，分辨率是640x1136px。也就是说在程序员实际可用的空间320x568pt，宽度没变，高度变高了。随着iPhone6的推出，尺寸上又有了变化。iPhone6的分辨率是750x1334px，375x667pt，在屏幕密度326ppi不变的情况下，增加了手机硬件的屏幕尺寸，实实在在的增加了程序的可用空间，也就是App可以显示更多的内容了。

{% img /images/post/ios/iphone6plus_size_comparison.jpg 600 586 iPhone Sizes %}

那么我们可以认为2倍是个和ppi相关的设定吗？其实不然。虽然早期的驱动力来自屏幕显示密度的提高，不过倍数的实际含义是表示屏幕的像素尺寸和屏幕对于程序员而言的pt尺寸的倍数关系。让我们观察一下iPhone6plus的设计。如果说倍数是ppi提高的正相关倍数，6plus的ppi只有401，而不是489。如果是489ppi的话，我们可以得到一个3倍细腻的显示效果，在6plus上显示一个3x的图片会和6上面显示一个2x的图片一样大小。现实的情况是，3x的图片的肉眼效果比2x图片的肉眼效果大。

所以从程序员的角度，我们简单的接受这么一个事实：iPhone6plus的逻辑分辨率是414x736pt，对应的像素分辨率是1242x2208px。程序员可以使用的屏幕空间，也就是逻辑分辨率再次变大了。程序中使用的图片，因为在6plus上载入3x的图片，像素更多了，但是ppi的提升不够3倍，所以实际显示效果变大了。这里我们还可以注意到一个事实：6plus的实际物理像素只有1080x1920，而不是1242x2208，也就是说程序员实际面对的是一个虚拟桌面大小，所以的定位计算都是在一个比真实手机屏幕分辨率大的一个虚拟空间上完成，然后由底层的系统将结果缩放到真实地1080x1920分辨率上。最终一个3x的图片会很接近2x图片在其他设备上的肉眼效果，略大。

Infographic References:

 - [iphone 6 screens demystified](http://www.paintcodeapp.com/news/iphone-6-screens-demystified)
 - [ultimate guide to iphone resolutions](http://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions)

## Best practice
虽然标题叫Best practice，来自知乎上的回答，不过只是一家之言，但从现阶段来看是个不错的方案。其中简单的用1.5倍的方式估计iPhone6plus的分辨率来制作设计图，会在适配6plus的时候损失精度，不过由于Autolayout的存在，这些不可避免的误差就成为留白了。这个方案可以说是基于5s，6，6plus都是基本相同的长宽比例，在精确适配6的情况下，只需要给出一套设计图的可行方案。

引用自[知乎关于如何改进工作流程以实现一份设计稿适配多个尺寸](http://www.zhihu.com/question/25308946)。

{% img /images/post/ios/design_for_6series_workflow.png 736 533 iPhone Sizes %}
{% blockquote %}
第一步，视觉设计阶段，设计师按宽度750px（iPhone 6）做设计稿，除图片外所有设计元素用矢量路径来做。设计定稿后在750px的设计稿上做标注，输出标注图。同时等比放大1.5倍生成宽度1125px的设计稿，在1125px的稿子里切图。

第二步，输出两个交付物给开发工程师：一个是程序用到的@3x切图资源，另一个是宽度750px的设计标注图。

第三步，开发工程师拿到750px标注图和@3x切图资源，完成iPhone 6（375pt）的界面开发。此阶段不能用固定宽度的方式开发界面，得用自动布局（auto layout），方便后续适配到其它尺寸。

第四步，适配调试阶段，基于iPhone 6的界面效果，分别向上向下调试iPhone 6 plus（414pt）和iPhone 5S及以下（320pt）的界面效果。由此完成大中小三屏适配。

为什么选择iPhone 6作为基准尺寸？

当面对大中小三种屏幕需要适配的时候，很容易想到先做好一种屏幕，再去适配剩下两种屏幕。第一个决定是到底以哪种屏幕作为设计和开发的基准尺寸。我们选择中间尺寸的iPhone 6（750px/375pt）作为基准，基于几个原因：

1、从中间尺寸向上和向下适配的时候界面调整的幅度最小。375pt下的设计效果适配到414pt和320pt偏差不会太大。假设以414pt为基准做出很优雅的设计，到320pt可能元素之间比例就不是那么回事了，比如图片和文字之间视觉比例可能失调。

2、iPhone 6 plus有两种显示模式，标准模式分辨率为1242x2208，放大模式分辨率为1125x2001（即iPhone 6的1.5倍）。可见官方系统里iPhone 6和iPhone 6 plus分辨率之间就存在1.5倍的倍率关系。很多情况下这两种尺寸可以用1.5倍直接等比适配。

3、1242x2208这个奇葩的数值是苹果官方都不愿意公开宣传的一个分辨率，不便于记忆和计算栅格。640x1136虽然是广泛应用的一个分辨率，但是大屏时代依然以小尺寸为设计基准显然不合时宜，设计师会停留在小屏的视角做设计。

所以，iPhone6的750x1334是最适合基准尺寸。

只交付一套设计稿，默认用什么规则来适配？

前文提到适配策略是先选择iPhone 6作为基准设计尺寸，然后通过一套适配规则自动适配到另外两种尺寸。这套适配规则总结起来就一句话：文字流式，控件弹性，图片等比缩放。控件弹性指的是，navigation、cell、bar等适配过程中垂直方向上高度不变；水平方向宽度变化时，通过调整元素间距或元素右对齐的方式实现自适应。这样屏幕越大，在垂直方向上可以显示更多内容，发挥大屏幕的优势。
{% endblockquote %}

## Icon and Image Sizes
在Apple的官方iOS Human Interface Guidelines中给出了多个标准元素的尺寸要求，以及一些界面元素的推荐尺寸。Ref: [Icon and Image Sizes](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/IconMatrix.html#//apple_ref/doc/uid/TP40006556-CH27)


